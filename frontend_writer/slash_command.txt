/? (slash|macros|format|hotkeys)? // Get help on macros, chat formatting and commands.
// (string)? // Write a comment.
/abort [quiet=true|false]?=true (string)? // Aborts the slash command batch execution.
/abs (number|varname) // Performs an absolute value operation of a value and passes the result down the pipe. Can use variable names. Example: /abs i
/add (...number|varname|list) // Performs an addition of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /add 10 i 30 j /add ["count", 15, 2, "i"]
/addglobalvar [key=varname] (number|string) // Add a value to a global variable and pass the result down the pipe. Example: /addglobalvar key=score 10
/addswipe [switch=true|false]? (string) // Adds a swipe to the last chat message. Use switch=true to switch to directly switch to the new swipe.
/addvar [key=varname] (number|string) // Add a value to a local variable and pass the result down the pipe. Example: /addvar key=score 10
/api [quiet=true|false]?=false (kobold|horde|novel|koboldcpp|kcpp|openai|oai|google|openrouter|openrouter-text|ooba|mancer|vllm|aphrodite|tabby|togetherai|llamacpp|ollama|infermaticai|dreamgen|featherless|huggingface|generic|windowai|claude|scale|ai21|makersuite|mistralai|custom|cohere|perplexity|groq|01ai|blockentropy|nanogpt)? // Connect to an API. If no argument is provided, it will return the currently connected API. Available APIs: kobold, horde, novel, koboldcpp, kcpp, openai, oai, google, openrouter, openrouter-text, ooba, mancer, vllm, aphrodite, tabby, togetherai, llamacpp, ollama, infermaticai, dreamgen, featherless, huggingface, generic, windowai, claude, scale, ai21, makersuite, mistralai, custom, cohere, perplexity, groq, 01ai, blockentropy, nanogpt
/api-url [api=custom|kobold|ooba|mancer|vllm|aphrodite|tabby|koboldcpp|togetherai|llamacpp|ollama|infermaticai|dreamgen|openrouter|featherless|huggingface|generic]? [connect=true|false]?=true [quiet=true|false]?=false (string)? // Set the API url / server url for the currently selected API, including the port. If no argument is provided, it will return the current API url. If a manual API is provided to set the URL, make sure to set connect=false, as auto-connect only works for the currently selected API, or consider switching to it with /api first. This slash command works for most of the Text Completion sources, KoboldAI Classic, and also Custom OpenAI compatible for the Chat Completion sources. If unsure which APIs are supported, check the auto-completion of the optional api argument of this command.
/ask [name=string] [return=pipe|object|toast-html|toast-text|console|none]?=pipe (string)? // Asks a specified character card a prompt. Character name must be provided in a named argument.
/audioenable [type=bgm|ambient] [state=true|false]?=true // 控制音乐播放器或音效播放器的开启与关闭。 Example: /audioenable type=bgm state=true 打开音乐播放器。 /audioenable type=ambient state=false 关闭音效播放器。
/audioimport [type=bgm|ambient] [play=true|false]?=true (string) // 导入音频或音乐链接，并决定是否立即播放，默认为自动播放。可批量导入链接，使用英文逗号分隔。 Example: /audioimport type=bgm https://example.com/song1.mp3,https://example.com/song2.mp3 导入 BGM 音乐并立即播放第一个链接。 /audioimport type=ambient play=false url=https://example.com/sound1.mp3,https://example.com/sound2.mp3 导入音效链接 (不自动播放)。
/audiomode [type=bgm|ambient] [mode=repeat|random|single|stop] // 切换音乐播放器或音效播放器的播放模式。 Example: /audiomode type=bgm mode=repeat 将音乐播放器的模式设置为循环播放。 /audiomode type=ambient mode=random 将音效播放器的模式设置为随机播放。
/audioplay [type=bgm|ambient] [play=true|false]=true // 控制音乐播放器或音效播放器的播放与暂停。 Example: /audioplay type=bgm 播放当前音乐。 /audioplay type=ambient play=false 暂停当前音效。
/audioselect [type=bgm|ambient] (string) // 选择并播放音频。如果音频链接不存在，则先导入再播放。 Example: /audioselect type=bgm https://example.com/song.mp3 选择并播放指定的音乐。 /audioselect type=ambient https://example.com/sound.mp3 选择并播放指定的音效。
/bg (string)? // Sets a background according to the provided filename. Partial names allowed. If no background is provided, this will return the currently selected background. Example: /bg beach.jpg /bg
/bgcol // – WIP test of auto-bg avg coloring
/break (string|number|range|bool|varname|closure|subcommand|list|dictionary)? // Break out of a loop or closure executed through /run or /:
/breakpoint // Set a breakpoint for debugging in the QR Editor.
/bubble // Sets the message style to bubble chat mode.
/buttons [labels=list] (string) // Shows a blocking popup with the specified text and buttons. Returns the clicked button label into the pipe or empty string if canceled. Example: /buttons labels=["Yes","No"] Do you want to continue?
/caption [quiet=true|false]?=false [mesId=number]? (string)? // Caption an image with an optional prompt and passes the caption down the pipe. Only multimodal sources support custom prompts. Provide a message ID to get an image from a message instead of uploading one. Set the "quiet" argument to true to suppress sending a captioned message, default: false.
/char-find [...tag=string]? [preferCurrent=true|false]?=true [quiet=true|false]?=false (string)? // Searches for a character and returns its avatar key. This can be used to choose the correct character for something like /sendas or other commands in need of a character name if you have multiple characters with the same name. Example: /char-find name="Chloe" Returns the avatar key for "Chloe". /search name="Chloe" tag="friend" Returns the avatar key for the character "Chloe" that is tagged with "friend". This is useful if you for example have multiple characters named "Chloe", and the others are "foe", "goddess", or anything else, so you can actually select the character you are looking for.
/chat-manager // Opens the chat manager for the current character/group.
/classify [api=local|extras|llm|webllm]? [prompt=string]? (string) // Performs an emotion classification of the given text and returns a label. Allows to specify which Classifier API to perform the classification with. Example: /classify I am so happy today!
/classify-expressions [return=pipe|object|toast-html|toast-text|console|none]?=pipe [format=plain|json]? // Returns a list of available expressions, including custom expressions.
/closechat // Closes the current chat.
/closure-deserialize (string) // Deserialize a closure from text. Examples: /closure-deserialize {{getvar::myClosure}} | /let myClosure {{pipe}} | /let y bar | /:myClosure x=foo
/closure-serialize (closure) // Serialize a closure as text that can be stored in global and chat variables. Examples: /closure-serialize {: x=1 /echo x is {{var::x}} and y is {{var::y}} :} | /setvar key=myClosure
/comment [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Adds a note/comment message not part of the chat. If compact is set to true, the message is sent using a compact layout. Example: /comment This is a comment /comment compact=true This is a compact comment
/context [quiet=true|false]?=false (string)? // Selects context template by name. Gets the current template if no name is provided
/continue [await=true|false]?=false (string)? // Continues the last message in the chat, with an optional additional prompt. If await=true named argument is passed, the command will await for the continued generation before proceeding. Example: /continue Continues the chat with no additional prompt and immediately proceeds to the next command. /continue await=true Let's explore this further... Continues the chat with the provided prompt and waits for the generation to finish.
/cos (number|varname) // Performs a cosine operation of a value and passes the result down the pipe. Can use variable names. Example: /cos i
/count // Counts the number of tokens in the current chat.
/createentry [file=string] [key=string]? (string)? // Create a new record in the specified book with the key and content (both are optional) and pass the UID down the pipe. Example: /createentry file=chatLore key=Shadowfang The sword of the king
/cut (...number|range) // Cuts the specified message or continuous chunk from the chat. Ranges are inclusive! Example: /cut 0-10
/db // Open the data bank
/db-add [source=global|character|chat]?=chat [name=string]? (string) // Add an attachment to the Data Bank. If name is not provided, it will be generated automatically. Returns the URL of the attachment.
/db-delete [source=global|character|chat]?=chat (string) // Delete an attachment from the Data Bank.
/db-disable [source=global|character|chat]? (string) // Disable an attachment in the Data Bank by its name or URL. Optionally, provide the source of the attachment.
/db-enable [source=global|character|chat]? (string) // Enable an attachment in the Data Bank by its name or URL. Optionally, provide the source of the attachment.
/db-get [source=global|character|chat]? (string) // Get attachment text from the Data Bank. Either provide the name or URL of the attachment. Optionally, provide the source of the attachment.
/db-list [source=global|character|chat]? [field=name|url]?=url // List attachments in the Data Bank as a JSON-serialized array. Optionally, provide the source of the attachments and the field to list by.
/db-update [source=global|character|chat]?=chat [name=string]? [url=string]? (string) // Update an attachment in the Data Bank, preserving its name. Returns a new URL of the attachment.
/decglobalvar (varname) // Decrement a global variable by 1 and pass the result down the pipe. Example: /decglobalvar score
/decvar (varname) // Decrement a local variable by 1 and pass the result down the pipe. Example: /decvar score
/delay (number) // Delays the next command in the pipe by the specified number of milliseconds. Example: /delay 1000
/delchat // Deletes the current chat.
/delmode (number)? // Enter message deletion mode, and auto-deletes last N messages if numeric argument is provided.
/delname (string) // Deletes all messages attributed to a specified name. Example: /delname John
/delswipe (number) // Deletes a swipe from the last chat message. If swipe id is not provided, it deletes the current swipe. Example: /delswipe Deletes the current swipe. /delswipe 2 Deletes the second swipe from the last chat message.
/div (number|varname) (number|varname) // Performs a division of two values and passes the result down the pipe. Can use variable names. Example: /div 10 i
/dupe // Duplicates the currently selected character.
/echo [title=string]? [severity=string]?=info [timeout=number]?=4000 [extendedTimeout=number]?=10000 [preventDuplicates=true|false]?=false [awaitDismissal=true|false]?=false [cssClass=string]? [color=string]? [escapeHtml=true|false]?=true [onClick=closure]? (string) // Echoes the provided text to a toast message. Can be used to display informational messages or for pipes debugging. Example: /echo title="My Message" severity=warning This is a warning message /echo color=purple This message is purple /echo onClick={: /echo escapeHtml=false color=transparent cssClass=wider_dialogue_popup <img src="/img/five.png" /> :} timeout=5000 Clicking on this message within 5 seconds will open the image.
/event-emit [data=string|number|bool|list|dictionary]? (string) // 发送某个事件, 同时可以发送一些数据 `data`. 所有正在监听该消息频道的 listener 都会自动运行. Example: /event-emit "读档" /event-emit data={{getvar::数据}} "存档" /event-emit data=8 "随便什么名称"
/extension-disable [reload=true|false]?=true (string) // Disables a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay enabled until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-disable Summarize
/extension-enable [reload=true|false]?=true (string) // Enables a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay disabled until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-enable Summarize
/extension-exists (string) // Checks if a specified extension exists. Example: /extension-exists SillyTavern-LALib
/extension-state (string) // Returns the state of a specified extension (true if enabled, false if disabled). Example: /extension-state Summarize
/extension-toggle [reload=true|false]?=true [state=true|false]? (string) // Toggles the state of a specified extension. By default, the page will be reloaded automatically, stopping any further commands. If reload=false named argument is passed, the page will not be reloaded, and the extension will stay in its current state until refreshed. The page either needs to be refreshed, or /reload-page has to be called. Example: /extension-toggle Summarize /extension-toggle Summarize state=true
/findentry [file=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=key (...string) // Find a UID of the record from the specified book using the fuzzy match of a field value (default: key) and pass it down the pipe. Example: /findentry file=chatLore field=key Shadowfang
/flat // Sets the message style to flat chat mode.
/flushglobalvar (varname|closure)? // Deletes the specified global variable. Example: /flushglobalvar score Deletes the global variable score.
/flushinject (string)? // Removes a script injection for the current chat. If no ID is provided, removes all script injections.
/flushvar (varname|closure)? // Delete a local variable. Example: /flushvar score
/forcesave // Forces a save of the current chat and settings
/fuzzy [list=list|varname] [threshold=number]?=0.4 [mode=first|best]?=first (string) // Performs a fuzzy match of each item in the list against the text to search. If any item matches, then its name is returned. If no item matches the text, no value is returned. The optional threshold (default is 0.4) allows control over the match strictness. A low value (min 0.0) means the match is very strict. At 1.0 (max) the match is very loose and will match anything. The optional mode argument allows to control the behavior when multiple items match the text. first (default) returns the first match below the threshold. best returns the best match below the threshold. The returned value passes to the next command through the pipe. Example: /fuzzy list=["a","b","c"] threshold=0.4 abc
/gen [lock=on|off]? [name=string]?=System [length=number]? [as=system|char]? (string) // Generates text using the provided prompt and passes it to the next command through the pipe, optionally locking user input while generating and allowing to configure the in-prompt name for instruct mode (default = "System"). "as" argument controls the role of the output prompt: system (default) or char. If "length" argument is provided as a number in tokens, allows to temporarily override an API response length.
/genraw [lock=on|off]? [instruct=on|off]?=on [stop=list]? [as=system|char]? [system=string]? [length=number]? (string) // Generates text using the provided prompt and passes it to the next command through the pipe, optionally locking user input while generating. Does not include chat history or character card. Use instruct=off to skip instruct formatting, e.g. /genraw instruct=off Why is the sky blue? Use stop=... with a JSON-serialized array to add one-time custom stop strings, e.g. /genraw stop=["\n"] Say hi "as" argument controls the role of the output prompt: system (default) or char. "system" argument adds an (optional) system prompt at the start. If "length" argument is provided as a number in tokens, allows to temporarily override an API response length.
/getcharbook [type=primary|additional|all]?=primary (number|string)? // Get a name of the character-bound lorebook and pass it down the pipe. Returns empty string if character lorebook is not set. Does not work in group chats without providing a character avatar name.
/getchatbook [name=string]? // Get a name of the chat-bound lorebook or create a new one if was unbound, and pass it down the pipe.
/getchatname // Returns the name of the current chat file into the pipe.
/getentryfield [file=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=content (string) // Get a field value (default: content) of the record with the UID from the specified book and pass it down the pipe. Example: /getentryfield file=chatLore field=content 123
/getglobalvar [key=varname]? [index=number|string]? (varname)? // Get a global variable value and pass it down the pipe. The index argument is optional. Examples: /getglobalvar height /getglobalvar key=height /getglobalvar index=3 costumes
/getpersonabook // Get a name of the current persona-bound lorebook and pass it down the pipe. Returns empty string if persona lorebook is not set.
/getpromptentry [...identifier=string|list]? [...name=string|list]? [return=simple|list|dict]?=simple // Gets the state of the specified prompt entries. If return is simple (default) then the return will be a single value if only one value was retrieved; otherwise uses a dict (if the identifier parameter was used) or a list.
/getvar [key=varname]? [index=number|string]? (varname)? // Get a local variable value and pass it down the pipe. The index argument is optional. Examples: /getvar height /getvar key=height /getvar index=3 costumes
/go (string) // Opens up a chat with the character or group by its name
/hide (number|range) // Hides a chat message from the prompt.
/if [left=varname|string|number] [right=varname|string|number]? [rule=eq|neq|in|nin|gt|gte|lt|lte|not]?=eq [else=closure|subcommand]? (closure|subcommand) // Compares the value of the left operand a with the value of the right operand b, and if the condition yields true, then execute any valid slash command enclosed in quotes and pass the result of the command execution down the pipe. Numeric values and string literals for left and right operands supported. If the rule is not provided, it defaults to eq. If no right operand is provided, it defaults to checking the left value to be truthy. A non-empty string or non-zero number is considered truthy, as is the value true or on. Only acceptable rules for no provided right operand are not, and no provided rule - which default to returning whether it is not or is truthy. Available rules: eq => a == b (strings & numbers) neq => a !== b (strings & numbers) in => a includes b (strings & numbers as strings) nin => a not includes b (strings & numbers as strings) gt => a > b (numbers) gte => a >= b (numbers) lt => a < b (numbers) lte => a <= b (numbers) not => !a (truthy) Examples: /if left=score right=10 rule=gte "/speak You win" triggers a /speak command if the value of "score" is greater or equals 10. /if left={{lastMessage}} rule=in right=surprise {: /echo SURPISE! :} executes a subcommand defined as a closure if the given value contains a specified word. /if left=myContent {: /echo My content had some content. :} executes the defined subcommand, if the provided value of left is truthy (contains some kind of contant that is not empty or false) /if left=tree right={{getvar::object}} {: /echo The object is a tree! :} executes the defined subcommand, if the left and right values are equals.
/imagine [quiet=true|false]?=false [negative=string]? [extend=true|false]? [edit=true|false]? [multimodal=true|false]? [snap=true|false]? [seed=number]? [width=number]? [height=number]? [steps=number]? [cfg=number]? [skip=number]? [model=string]? [sampler=string]? [scheduler=string]? [vae=string]? [upscaler=string]? [hires=true|false]? [scale=number]? [denoise=number]? [2ndpass=number]? [faces=true|false]? (you|me|scene|raw_last|last|face|background)? // Requests to generate an image and posts it to chat (unless quiet=true argument is specified). Supported arguments: you, me, scene, raw_last, last, face, background. Anything else would trigger a "free mode" to make generate whatever you prompted. Example: /imagine apple tree would generate a picture of an apple tree. Returns a link to the generated image.
/imagine-comfy-workflow (string) // (workflowName) - change the workflow to be used for image generation with ComfyUI, e.g. /imagine-comfy-workflow MyWorkflow
/imagine-source (string)? // If an argument is provided, change the source of the image generation, e.g. /imagine-source comfy. Returns the current source.
/imagine-style (string)? // If an argument is provided, change the style of the image generation, e.g. /imagine-style MyStyle. Returns the current style.
/impersonate [await=true|false]?=false (string)? // Calls an impersonation response, with an optional additional prompt. If await=true named argument is passed, the command will wait for the impersonation to end before continuing. Example: /impersonate What is the meaning of life?
/incglobalvar (varname) // Increment a global variable by 1 and pass the result down the pipe. Example: /incglobalvar score
/incvar (varname) // Increment a local variable by 1 and pass the result down the pipe. Example: /incvar score
/inject [id=string] [position=before|after|chat|none]?=after [depth=number]?=4 [scan=true|false]?=false [role=system|assistant|user]? [ephemeral=true|false]?=false [filter=closure]? (string)? // Injects a text into the LLM prompt for the current chat. Requires a unique injection ID. Positions: "before" main prompt, "after" main prompt, in-"chat", hidden with "none" (default: after). Depth: injection depth for the prompt (default: 4). Role: role for in-chat injections (default: system). Scan: include injection content into World Info scans (default: false). Hidden injects in "none" position are not inserted into the prompt but can be used for triggering WI entries.
/input [default=string]?="string" [large=on|off]?=off [wide=on|off]?=off [okButton=string]? [rows=number]? (string)? // Shows a popup with the provided text and an input field. The default argument is the default value of the input field, and the text argument is the text to display.
/instruct [quiet=true|false]?=false [forceGet=true|false]?=false (string)? // Selects instruct mode template by name. Enables instruct mode if not already enabled. Gets the current instruct template if no name is provided and instruct mode is enabled or forceGet=true is passed. Example: /instruct creative
/instruct-off // Disables instruct mode
/instruct-on // Enables instruct mode.
/instruct-state (true|false)? // Gets the current instruct mode state. If an argument is provided, it will set the instruct mode state.
/is-mobile // Returns true if the current device is a mobile device, false otherwise. Equivalent to {{isMobile}} macro.
/lastsprite (string) // Returns the last set sprite / expression for the named character.
/len (string|number|list|dictionary) // Gets the length of a value and passes the result down the pipe. For strings, returns the number of characters. For lists and dictionaries, returns the number of elements. For numbers, returns the number of digits (including the sign and decimal point). Example: /len Lorem ipsum | /echo
/let [key=varname]? (varname)? (string|number|bool|list|dictionary|closure)? // Declares a new variable in the current scope. Examples: /let x foo bar | /echo {{var::x}} /let key=x foo bar | /echo {{var::x}} /let y
/list-gallery [char=string]? [group=string]? // List images in the gallery of the current char / group or a specified char / group.
/listinjects [return=object|chat-html|popup-html|toast-html|console|none]?=popup-html [format=popup|chat|none] // Lists all script injections for the current chat. Displays injects in a popup by default. Use the return argument to change the return type.
/listvar [scope=all|local|global]?=all [return=object|chat-html|popup-html|toast-html|console|none]?=popup-html [format=popup|chat|none] // List registered chat variables. Displays variables in a popup by default. Use the return argument to change the return type.
/lock (string)=toggle // Locks/unlocks a persona (name and avatar) to the current chat
/log (number|varname) // Performs a logarithm operation of a value and passes the result down the pipe. Can use variable names. Example: /log i
/lower (string) // Converts the provided string to lowercase.
/max (...number|varname|list) // Returns the maximum value of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Examples: /max 10 i 30 j /max ["count", 15, 2, "i"]
/member-add (string) // Adds a new group member to the group chat. Example: /member-add John Doe
/member-disable (number|string) // Disables a group member from being drafted for replies.
/member-down (number|string) // Moves a group member down in the group chat list.
/member-enable (number|string) // Enables a group member to be drafted for replies.
/member-remove (number|string) // Removes a group member from the group chat. Example: /member-remove 2 /member-remove John Doe
/member-up (number|string) // Moves a group member up in the group chat list.
/messages [names=on|off]?=off [hidden=on|off]?=on [role=system|assistant|user]? (number|range) // Returns the specified message or range of messages as a string. Use the hidden=off argument to exclude hidden messages. Use the role argument to filter messages by role. Possible values are: system, assistant, user. Examples: /messages 10 Returns the 10th message. /messages names=on 5-10 Returns messages 5 through 10 with author names.
/min (...number|varname|list) // Returns the minimum value of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /min 10 i 30 j /min ["count", 15, 2, "i"]
/mod (number|varname) (number|varname) // Performs a modulo operation of two values and passes the result down the pipe. Can use variable names. Example: /mod i 2
/model [quiet=true|false]?=false (string)? // Sets the model for the current API. Gets the current model name if no argument is provided.
/movingui (string) // activates a movingUI preset by name
/mul (...number|varname|list) // Performs a multiplication of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Examples: /mul 10 i 30 j /mul ["count", 15, 2, "i"]
/newchat [delete=true|false]?=false // Start a new chat with the current character
/panels // Toggle UI panels on/off
/parser-flag (STRICT_ESCAPING|REPLACE_GETVAR) (on|off)?=on // Set a parser flag.
/pass (string|number|bool|list|dictionary|closure) // /pass (text) – passes the text to the next command through the pipe. Example: /pass Hello world
/peek (number|string) // Shows a group member character card without switching chats. Examples: /peek Gloria Shows the character card for the character named "Gloria".
/persona [mode=lookup|temp|all]?=all (string) // Selects the given persona with its name and avatar (by name or avatar url). If no matching persona exists, applies a temporary name.
/pick-icon // Opens a popup with all the available Font Awesome icons and returns the selected icon's name. Example: /pick-icon | /if left={{pipe}} rule=eq right=false else={: /echo chosen icon: "{{pipe}}" :} {: /echo cancelled icon selection :} |
/popup [scroll=true|false]?=true [large=true|false]?=false [wide=true|false]?=false [wider=true|false]?=false [transparent=true|false]?=false [okButton=string]?=OK [cancelButton=string]? [result=true|false]?=false (string) // Shows a blocking popup with the specified text and buttons. Returns the popup text. Example: /popup large=on wide=on okButton="Confirm" Please confirm this action. /popup okButton="Left" cancelButton="Right" result=true Do you want to go left or right? | /echo 0 means right, 1 means left. Choice: {{pipe}}
/pow (number|varname) (number|varname) // Performs a power operation of two values and passes the result down the pipe. Can use variable names. Example: /pow i 2
/preset (string)? // Sets a preset by name for the current API. Gets the current preset if no name is provided. Example: /preset myPreset /preset
/profile [await=true|false]?=true (string)? // Switch to a connection profile or return the name of the current profile in no argument is provided. Use <None> to switch to no profile.
/profile-create (string) // Create a new connection profile using the current settings.
/profile-get (string)? // Get the details of the connection profile. Returns the selected profile if no argument is provided.
/profile-list // List all connection profile names.
/profile-update // Update the selected connection profile.
/proxy (string) // Sets a proxy preset by name.
/rand [from=number]?=0 [to=number]?=1 [round=round|ceil|floor]? // Returns a random number between from and to (inclusive). Examples: /rand Returns a random number between 0 and 1. /rand 10 Returns a random number between 0 and 10. /rand from=5 to=10 Returns a random number between 5 and 10.
/random (string)? // Start a new chat with a random character. If an argument is provided, only considers characters that have the specified tag.
/regex [name=string] (string)? // Runs a Regex extension script by name on the provided string. The script must be enabled.
/reload-page // Reloads the current page. All further commands will not be processed.
/rename-char [silent=true|false]?=true [chats=true|false]?=<null> (string) // Renames the current character.
/renamechat (string) // Renames the current chat.
/resetpanels // resets UI panels to original state
/round (number|varname) // Rounds a value and passes the result down the pipe. Can use variable names. Example: /round i
/run [...args=string|number|bool|list|dictionary]? (varname|string|closure) // Runs a closure from a scoped variable, or a Quick Reply with the specified name from a currently active preset or from another preset. Named arguments can be referenced in a QR with {{arg::key}}.
/send [compact=true|false]?=false [at=number]? [name=string]?={{user}} [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Adds a user message to the chat log without triggering a generation. If compact is set to true, the message is sent using a compact layout. If name is set, it will be displayed as the message sender. Can be an empty for no name. Example: /send Hello there! /send compact=true Hi
/sendas [name=string] [avatar=string]? [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Sends a message as a specific character. Uses the character avatar if it exists in the characters list. Example: /sendas name="Chloe" Hello, guys! will send "Hello, guys!" from "Chloe". /sendas name="Chloe" avatar="BigBadBoss" Hehehe, I am the big bad evil, fear me. will send a message as the character "Chloe", but utilizing the avatar from a character named "BigBadBoss". If "compact" is set to true, the message is sent using a compact layout.
/setentryfield [file=string] [uid=string] [field=key|keysecondary|comment|content|constant|vectorized|selective|selectiveLogic|addMemo|order|position|disable|excludeRecursion|preventRecursion|delayUntilRecursion|probability|useProbability|depth|group|groupOverride|groupWeight|scanDepth|caseSensitive|matchWholeWords|useGroupScoring|automationId|role|sticky|cooldown|delay]?=content (string) // Set a field value (default: content) of the record with the UID from the specified book. To set multiple values for key fields, use comma-delimited list as a value. Example: /setentryfield file=chatLore uid=123 field=key Shadowfang,sword,weapon
/setglobalvar [key=varname] [index=number|string]? [as=string]?=string (string|number|bool|list|dictionary) // Set a global variable value and pass it down the pipe. The index argument is optional. To convert the value to a specific JSON type when using index, use the as argument. Example: /setglobalvar key=color green /setglobalvar key=ages index=John as=number 21
/setinput (string) // Sets the user input to the specified text and passes it to the next command through the pipe. Example: /setinput Hello world
/setpromptentry [...identifier=string|list]? [...name=string|list]? (on|off|toggle)=toggle // Sets the specified prompt manager entry/entries on or off.
/setvar [key=varname] [index=number|string]? [as=string]?=string (string|number|bool|list|dictionary) // Set a local variable value and pass it down the pipe. The index argument is optional. To convert the value to a specific JSON type when using index, use the as argument. Example: /setvar key=color green /setvar key=ages index=John as=number 21
/show-gallery // Shows the gallery.
/sin (number|varname) // Performs a sine operation of a value and passes the result down the pipe. Can use variable names. Example: /sin i
/single // Sets the message style to single document mode without names or avatars visible.
/sort [keysort=true|false]?=true (string|number|list|dictionary) // Sorts a list or dictionary in ascending order and passes the result down the pipe. For lists, returns the list sorted by value. For dictionaries, returns the ordered list of keys after sorting. Setting keysort=false means keys are sorted by associated value. Examples: /sort [5,3,4,1,2] | /echo /sort keysort=false {"a": 1, "d": 3, "c": 2, "b": 5} | /echo
/speak [voice=string]? (string) // Narrate any text using currently selected character's voice. Use voice="Character Name" argument to set other voice from the voice map. Example: /speak voice="Donald Duck" Quack!
/sprite (string) // Force sets the sprite for the current character.
/spriteoverride (string)? // Sets an override sprite folder for the current character. If the name starts with a slash or a backslash, selects a sub-folder in the character-named folder. Empty value to reset to default.
/sqrt (number|varname) // Performs a square root operation of a value and passes the result down the pipe. Can use variable names. Example: /sqrt i
/stop // Stops the generation and any streaming if it is currently running. Note: This command cannot be executed from the chat input, as sending any message or script from there is blocked during generation. But it can be executed via automations or QR scripts/buttons.
/sub (...number|varname|list) // Performs a subtraction of the set of values and passes the result down the pipe. Can use variable names, or a JSON array consisting of numbers and variables (with quotes). Example: /sub i 5 /sub ["count", 4, "i"]
/substr [start=number]? [end=number]? (string) // Extracts text from the provided string. If start is omitted, it's treated as 0. If start < 0, the index is counted from the end of the string. If start >= the string's length, an empty string is returned. If end is omitted, or if end >= the string's length, extracts to the end of the string. If end < 0, the index is counted from the end of the string. If end <= start after normalizing negative values, an empty string is returned. Example: /let x The morning is upon us.     || /substr start=-3 {{var::x}}         | /echo  |/# us.                    || /substr start=-3 end=-1 {{var::x}}  | /echo  |/# us                     || /substr end=-1 {{var::x}}           | /echo  |/# The morning is upon us || /substr start=4 end=-1 {{var::x}}   | /echo  |/# morning is upon us     ||
/summarize [source=extras|main|webllm]? [prompt=string]? [quiet=true|false]?=false (string)? // Summarizes the given text. If no text is provided, the current chat will be summarized. Can specify the source and the prompt to use.
/sync // Syncs the user persona in user-attributed messages in the current chat.
/sys [compact=true|false]?=false [at=number]? [return=pipe|object|toast-html|toast-text|console|none]?=none (string) // Sends a message as a system narrator. If compact is set to true, the message is sent using a compact layout. Example: /sys The sun sets in the west. /sys compact=true A brief note.
/sysgen (string) // Generates a system message using a specified prompt.
/sysname (string)? // Sets a name for future system narrator messages in this chat (display only). Default: System. Leave empty to reset.
/sysprompt [quiet=true|false]?=false [forceGet=true|false]?=false (string)? // Selects a system prompt by name, using fuzzy search to find the closest match. Gets the current system prompt if no name is provided and sysprompt is enabled or forceGet=true is passed. Example: /sysprompt
/sysprompt-off // Disables system prompt
/sysprompt-on // Enables system prompt.
/sysprompt-state (true|false)? // Gets the current system prompt state. If an argument is provided, it will set the system prompt state.
/tempchat // Opens a temporary chat with Assistant.
/th // Character Expressions: toggles Image Type - talkinghead (extras) on/off.
/theme (string)? // Sets a UI theme by name. If no theme name is is provided, this will return the currently active theme. Example: /theme Cappuccino /theme
/times [guard=on|off]? (number) (closure|subcommand) // Execute any valid slash command enclosed in quotes repeats number of times. Examples: /setvar key=i 1 | /times 5 "/addvar key=i 1" adds 1 to the value of "i" 5 times. /times 4 "/echo {{timesIndex}}" echos the numbers 0 through 4. {{timesIndex}} is replaced with the iteration number (zero-based). Loops are limited to 100 iterations by default, pass guard=off to disable.
/tokenizer (best_match|none|gpt2|llama|llama3|gemma|jamba|qwen2|command_r|nerd|nerd2|mistral|nemo|yi|claude|api_current)? // Selects tokenizer by name. Gets the current tokenizer if no name is provided. Available tokenizers: best_match, none, gpt2, llama, llama3, gemma, jamba, qwen2, command_r, nerd, nerd2, mistral, nemo, yi, claude, api_current
/tokens (string) // Counts the number of tokens in the provided text.
/tools-invoke [parameters=dictionary] (string) // Invokes a registered tool by name. The parameters argument MUST be a JSON-serialized object.
/tools-list [return=pipe|object|toast-html|toast-text|console|none]?=none // Gets a list of all registered tools in the OpenAI function JSON format. Use the return argument to specify the return value type.
/tools-register [name=string] [description=string] [parameters=dictionary] [displayName=string]? [formatMessage=closure] [shouldRegister=closure]? [stealth=true|false]?=false (closure) // Registers a new tool with the tool registry. The parameters argument MUST be a JSON-serialized object with a valid JSON schema. The unnamed argument MUST be a closure that accepts the function parameters as local script variables. See json-schema.org and OpenAI Function Calling for more information. Example: /let key=echoSchema { "$schema": "http://json-schema.org/draft-04/schema#", "type": "object", "properties": { "message": { "type": "string", "description": "The message to echo." } }, "required": [ "message" ] } || /tools-register name=Echo description="Echoes a message. Call when the user is asking to repeat something" parameters={{var::echoSchema}} {: /echo {{var::arg.message}} :}
/tools-unregister (string) // Unregisters a tool from the tool registry.
/translate [target=af|sq|am|ar|hy|az|eu|be|bn|bs|bg|ca|ceb|zh-CN|zh-TW|co|hr|cs|da|nl|en|eo|et|fi|fr|fy|gl|ka|de|el|gu|ht|ha|haw|iw|hi|hmn|hu|is|ig|id|ga|it|ja|jw|kn|kk|km|ko|ku|ky|lo|la|lv|lt|lb|mk|mg|ms|ml|mt|mi|mr|mn|my|ne|no|ny|ps|fa|pl|pt-PT|pt-BR|pa|ro|ru|sm|gd|sr|st|sn|sd|si|sk|sl|so|es|su|sw|sv|tl|tg|ta|te|th|tr|uk|ur|uz|vi|cy|xh|yi|yo|zu]? [provider=string]? (string) // Translate text to a target language. If target language is not provided, the value from the extension settings will be used.
/trigger [await=true|false]?=false (number|string)? // Triggers a message generation. If in group, can trigger a message for the specified group member index or name. If await=true named argument is passed, the command will await for the triggered generation before continuing.
/trimend (string) // Trims the text to the end of the last full sentence.
/trimstart (string) // Trims the text to the start of the first full sentence. Example: /trimstart This is a sentence. And here is another sentence.
/trimtokens [limit=number] [direction=start|end] (string)? // Trims the start or end of text to the specified number of tokens. Example: /trimtokens limit=5 direction=start This is a long sentence with many words
/unhide (number|range) // Unhides a message from the prompt.
/uploadsprite [name=string]? [label=string] [folder=string]? (string) // Upload a sprite from a URL.Example:/uploadsprite name=Seraphina label=joy /user/images/Seraphina/Seraphina_2024-12-22@12h37m57s.png
/upper (string) // Converts the provided string to uppercase.
/var [key=varname]? [index=number]? [as=string]?=string (varname)? (string|number|bool|list|dictionary|closure)? // Get or set a variable. Use index to access elements of a JSON-serialized list or dictionary. To convert the value to a specific JSON type when using with index, use the as argument. Examples: /let x foo | /var x foo bar | /var x | /echo /let x foo | /var key=x foo bar | /var x | /echo /let x {} | /var index=cool as=number x 1337 | /echo {{var::x}}
/vn // Swaps Visual Novel Mode On/Off
/while [left=varname|string|number] [right=varname|string|number]? [rule=eq|neq|in|nin|gt|gte|lt|lte|not]?=eq [guard=on|off]?=off (closure|subcommand) // Compares the value of the left operand a with the value of the right operand b, and if the condition yields true, then execute any valid slash command enclosed in quotes. Numeric values and string literals for left and right operands supported. Available rules: eq => a == b (strings & numbers) neq => a !== b (strings & numbers) in => a includes b (strings & numbers as strings) nin => a not includes b (strings & numbers as strings) gt => a > b (numbers) gte => a >= b (numbers) lt => a < b (numbers) lte => a <= b (numbers) not => !a (truthy) Examples: /setvar key=i 0 | /while left=i right=10 rule=lte "/addvar key=i 1" adds 1 to the value of "i" until it reaches 10. /while left={{getvar::currentword}} {: /setvar key=currentword {: /do-something-and-return :}() | /echo The current work is "{{getvar::currentword}}" :} executes the defined subcommand as long as the "currentword" variable is truthy (has any content that is not false/empty) Loops are limited to 100 iterations by default, pass guard=off to disable.
/wi-get-timed-effect [file=string] [effect=string] [format=bool|number]?=bool (string) // Get the current state of the timed effect for the record with the UID from the specified book. Example: /wi-get-timed-effect file=chatLore format=bool effect=sticky 123 - returns true or false if the effect is active or not /wi-get-timed-effect file=chatLore format=number effect=sticky 123 - returns the remaining duration of the effect, or 0 if inactive
/wi-set-timed-effect [file=string] [uid=string] [effect=string] (on|off|toggle) // Set a timed effect for the record with the UID from the specified book. The duration must be set in the entry itself. Will only be applied for the current chat. Enabling an effect that was already active refreshes the duration. If the last chat message is swiped or deleted, the effect will be removed. Example: /wi-set-timed-effect file=chatLore uid=123 effect=sticky on
/world [state=on|off|toggle]? [silent=true|false]? (string)? // Sets active World, or unsets if no args provided, use state=off and state=toggle to deactivate or toggle a World, use silent=true to suppress toast messages.